from django.shortcuts import render
from django.http import HttpResponse
from django.views import View
from django.views.generic import TemplateView
from django.http import HttpResponseRedirect
from django.urls import reverse


# Create your views here.

#class from which all class based views inherit
class BaseView(TemplateView):
    default_title = 'My Website'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.setdefault('title', self.default_title)
        return context

#def home(request):
 # return HttpResponse("<h1>Hello Django!</h1>")

#def about(request):
 #   template_name = 'about.html'

  #  def get_context_data(self, **kwargs):
    #    context = super().get_context_data(**kwargs)
   #     context.update({
     #       'title': 'ABOUT',
      #      'page_heading': 'Welcome to ahharrrgdfgdg Class-Based View',
       #     'page_content': 'This is the asdagds generated by the class-based view.',
       # })
        #return context

    #def post(self, request, *args, **kwargs):
     #   about = request.POST.get('about')
      #  response = HttpResponse('about')
       # return response

def portfolio(request):
  return HttpResponse("<h1>This is where I'd put my portfolio, if I had one. </h1>")

def cats(request):
  return HttpResponse("<h5>I have 2 cats, Nemo and Cherrie!</h5>")

def printingpress(request):
  return HttpResponse("<h5>The printing press was invented in 1440 by Johannes Gutenberg</h5>")

def aliens(request):
  return HttpResponse("<h5>The truth is out there.</h5>")

def function_view(request):
    context = {
        'page_title': 'Function-Based View',
        'page_heading': 'Welcome to the Function-Based View',
        'page_content': 'This is the content generated by the function-based view.',
    }
    return render(request, 'bootswatch.html', context)

class ClassView(BaseView):
  template_name = 'bootswatch.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': 'Class-Based View',
          'page_heading': 'Welcome to the Class-Based View',
          'page_content': 'This is the content generated by the class-based view.',
      })
      return context

class about(BaseView):
  template_name = 'about.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': 'about',
          'page_heading': "Here's my about page :)",
          'page_content': 'Lorem ipsum dolor amet...',
      })
      return context

class home(BaseView):
  template_name = 'home.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': 'home',
          'page_heading': "website home/landing page",
          'page_content': 'welcome!',
      })
      return context

class portfolio(BaseView):
  template_name = 'portfolio.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': 'portfolio',
          'page_heading': "here's where i'd keep my portfolio if i had one",
      })
      return context

class printingpress(BaseView):
  template_name = 'printingpress.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': 'portfolio',
          'page_heading': "the printing press was invented in 1440 by johannes gutenberg",
      })
      return context

class cats(BaseView):
  template_name = 'cats.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': 'my cats',
          'page_heading': "i have 2 cats - nemo & cherrie",
      })
      return context

class aliens(BaseView):
  template_name = 'aliens.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': '[xfiles theme]',
          'page_heading': "the truth is out there",
      })
      return context

class ThemeView(BaseView):
  template_name = 'theme.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      # Add additional context data if needed
      return context

  def post(self, request, *args, **kwargs):
      theme = request.POST.get('theme')
      response = HttpResponseRedirect(reverse('theme'))
      response.set_cookie('theme', theme)
      return response
